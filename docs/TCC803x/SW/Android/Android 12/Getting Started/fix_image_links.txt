from PIL import Image
import os
import re
from urllib.parse import quote, unquote

# GitHub Pages 경로 및 로컬 이미지 루트 경로
GITHUB_IMAGE_BASE = "https://ye-eun-kang.github.io/documentimage/"
LOCAL_IMAGE_ROOT = "C:/Users/ye.kang/Desktop/YE/15. web-base documentation/Github/documentimage/"

# 1. 이미지 경로 변환
def convert_all_image_links(content):
    pattern = r'!\[[^\]]*?\]\(([^)]+?\.(?:png|jpg|jpeg|svg))\)'

    def replacer(match):
        raw_path = match.group(1)
        path = raw_path.replace("\\", "/")
        if "documentimage" not in path.lower():
            return match.group(0)
        try:
            idx = path.lower().index("documentimage")
            relative_path = path[idx + len("documentimage") + 1:]
            decoded = unquote(relative_path)
            encoded = quote(decoded)
            return f"![]({GITHUB_IMAGE_BASE}{encoded})"
        except Exception:
            return match.group(0)

    return re.sub(pattern, replacer, content, flags=re.IGNORECASE)

# 2. 이메일, URL 자동 변환
def convert_email_and_url(content):
    content = re.sub(r'<(\[[^\]]+\]\([^)]+\))>', r'\1', content)
    content = re.sub(
        r'(?<!\()(?<!\[)(?<!mailto:)(\b[\w\.-]+@[\w\.-]+\.\w{2,}\b)',
        r'[\1](mailto:\1)',
        content
    )
    content = re.sub(
        r'<(https?://[^\s>]+)>',
        r'[\1](\1)',
        content
    )
    return content

# 3. </table> 다음에 공백 추가
def ensure_blank_line_after_table(content):
    lines = content.splitlines()
    fixed_lines = []
    for i, line in enumerate(lines):
        fixed_lines.append(line)
        if line.strip().lower() == "</table>":
            if i + 1 < len(lines) and lines[i + 1].strip() != "":
                fixed_lines.append("")
            elif i + 1 == len(lines):
                fixed_lines.append("")
    return "\n".join(fixed_lines)

# 4. 이미지 width 비율 계산
def get_image_width_tag(path_from_docimage_root):
    local_path = os.path.join(LOCAL_IMAGE_ROOT, path_from_docimage_root.replace("/", os.sep))
    if not os.path.isfile(local_path):
        return 'width="45%"'
    try:
        with Image.open(local_path) as img:
            width, height = img.size
            ratio = width / height
            if ratio > 1.6:
                return 'width="90%"'
            elif ratio < 0.8:
                return 'width="30%"'
            else:
                return 'width="45%"'
    except Exception:
        return 'width="45%"'

# 5. 마크다운 이미지 -> <img> + width="%" 자동 삽입
def center_resize_images_outside_tables(content):
    table_blocks = re.findall(r"<table[\s\S]*?</table>", content, re.IGNORECASE)
    placeholders = {}
    for i, block in enumerate(table_blocks):
        key = f"__TABLE_PLACEHOLDER_{i}__"
        content = content.replace(block, key)
        placeholders[key] = block

    def image_replacer(match):
        raw_url = match.group(1)
        path = raw_url.replace("\\", "/")
        if "documentimage" not in path.lower():
            return match.group(0)
        try:
            idx = path.lower().index("documentimage")
            relative_path = path[idx + len("documentimage") + 1:]
            decoded = unquote(relative_path)
            encoded = quote(decoded)
            width_tag = get_image_width_tag(decoded)
            return f'<p align="center"><img src="{GITHUB_IMAGE_BASE}{encoded}" {width_tag} /></p>'
        except Exception:
            return match.group(0)

    content = re.sub(r'!\[\]\(([^)]+?\.(?:png|jpg|jpeg|svg))\)', image_replacer, content)

    for key, block in placeholders.items():
        content = content.replace(key, block)

    return content

# 6. style="width:..." 제거하고 width 속성만 유지
def replace_img_style_with_width(content):
    return re.sub(r'style\s*=\s*"[^"]*width\s*:\s*([^";]+)[^"]*"', r'width="\1"', content)

# === 실행 대상 파일 경로 ===
input_file = "TCC803x Android 12 SDK-Getting Started.mdx"
output_file = "TCC803x Android 12 SDK-Getting Started.mdx"  # .mdx로 저장

# === 실행 ===
if os.path.exists(input_file):
    with open(input_file, "r", encoding="utf-8") as f:
        content = f.read()

    converted = convert_all_image_links(content)
    converted = convert_email_and_url(converted)
    converted = ensure_blank_line_after_table(converted)
    converted = center_resize_images_outside_tables(converted)
    converted = replace_img_style_with_width(converted)

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(converted)

    print(f" 변환 완료: {output_file}")
else:
    print(f" 파일을 찾을 수 없습니다: {input_file}")
